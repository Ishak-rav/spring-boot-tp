package com.example;

import com.example.service.AuthService;
import com.example.service.PrioriteService;
import com.example.service.CategorieService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import io.swagger.v3.oas.annotations.OpenAPIDefinition;
import io.swagger.v3.oas.annotations.info.Info;
import io.swagger.v3.oas.annotations.info.Contact;
import io.swagger.v3.oas.annotations.info.License;
import io.swagger.v3.oas.annotations.security.SecurityScheme;
import io.swagger.v3.oas.annotations.security.SecuritySchemes;
import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;

/**
 * Application principale pour le syst√®me de gestion de tickets
 * 
 * Cette application Spring Boot fournit une API REST pour la gestion de tickets
 * de support
 * avec authentification JWT et contr√¥le d'acc√®s bas√© sur les r√¥les.
 * 
 * Fonctionnalit√©s principales :
 * - Authentification utilisateur avec JWT
 * - Gestion des tickets (cr√©ation, modification, r√©solution)
 * - Gestion des priorit√©s et cat√©gories
 * - Contr√¥le d'acc√®s admin/utilisateur
 * - API document√©e avec Swagger
 * 
 * @author Ticket Management Team
 * @version 1.0.0
 * @since 2024
 */
@Slf4j
@SpringBootApplication
@RequiredArgsConstructor
@OpenAPIDefinition(info = @Info(title = "Ticket Management API", version = "1.0.0", description = """
        API de gestion de tickets de support permettant :

        **Fonctionnalit√©s principales :**
        - Authentification et autorisation des utilisateurs
        - Cr√©ation et gestion de tickets par tous les utilisateurs connect√©s
        - R√©solution de tickets par les administrateurs
        - Consultation publique des tickets non r√©solus
        - Gestion des priorit√©s et cat√©gories

        **R√¥les et permissions :**
        - **Utilisateur non connect√©** : Peut voir les tickets non r√©solus et cr√©er un compte
        - **Utilisateur connect√©** : Peut cr√©er, modifier ses tickets et voir tous les tickets
        - **Administrateur** : Peut tout faire + r√©soudre/rouvrir les tickets + g√©rer priorit√©s/cat√©gories

        **Authentification :**
        Utilisez l'endpoint `/api/auth/login` pour obtenir un token JWT, puis ajoutez-le dans l'en-t√™te :
        `Authorization: Bearer <votre-token>`
        """, contact = @Contact(name = "√âquipe de d√©veloppement", email = "support@ticketmanagement.com"), license = @License(name = "MIT License", url = "https://opensource.org/licenses/MIT")))
@SecuritySchemes({
        @SecurityScheme(name = "bearerAuth", type = SecuritySchemeType.HTTP, scheme = "bearer", bearerFormat = "JWT", description = "Token JWT pour l'authentification. Obtenez-le via /api/auth/login")
})
public class TicketManagementApplication {

    /**
     * Point d'entr√©e principal de l'application
     * 
     * @param args arguments de la ligne de commande
     */
    public static void main(String[] args) {
        try {
            log.info("=".repeat(60));
            log.info("üöÄ D√©marrage de l'application Ticket Management");
            log.info("=".repeat(60));

            SpringApplication.run(TicketManagementApplication.class, args);

            log.info("=".repeat(60));
            log.info("‚úÖ Application Ticket Management d√©marr√©e avec succ√®s !");
            log.info("üìñ Documentation API disponible : http://localhost:8080/swagger-ui.html");
            log.info("üîß Console H2 (dev) : http://localhost:8080/h2-console");
            log.info("=".repeat(60));

        } catch (Exception e) {
            log.error("‚ùå Erreur lors du d√©marrage de l'application", e);
            System.exit(1);
        }
    }

    /**
     * Initialisation des donn√©es de base au d√©marrage de l'application
     * 
     * Cette m√©thode s'ex√©cute automatiquement apr√®s le d√©marrage et initialise :
     * - Les priorit√©s par d√©faut (Faible, Normale, Haute, Critique, Urgente)
     * - Les cat√©gories par d√©faut (Bug, Am√©lioration, etc.)
     * - Un utilisateur administrateur par d√©faut
     * 
     * @param prioriteService  service de gestion des priorit√©s
     * @param categorieService service de gestion des cat√©gories
     * @param authService      service d'authentification
     * @return CommandLineRunner pour l'initialisation
     */
    @Bean
    public CommandLineRunner initializeData(
            PrioriteService prioriteService,
            CategorieService categorieService,
            AuthService authService) {

        return args -> {
            try {
                log.info("üîß Initialisation des donn√©es de base...");

                log.info("üìã Initialisation des priorit√©s par d√©faut...");
                prioriteService.initializeDefaultPriorites();
                long prioriteCount = prioriteService.getTotalPrioriteCount();
                log.info("‚úÖ {} priorit√©(s) disponible(s)", prioriteCount);

                log.info("üè∑Ô∏è  Initialisation des cat√©gories par d√©faut...");
                categorieService.initializeDefaultCategories();
                long categorieCount = categorieService.getTotalCategorieCount();
                log.info("‚úÖ {} cat√©gorie(s) disponible(s)", categorieCount);

                log.info("üë§ Cr√©ation de l'utilisateur administrateur par d√©faut...");
                try {
                    authService.createUser("admin", "admin123", true);
                    log.info("‚úÖ Utilisateur admin cr√©√© (pseudo: admin, mot de passe: admin123)");
                    log.warn("‚ö†Ô∏è  ATTENTION: Changez le mot de passe de l'admin en production !");
                } catch (RuntimeException e) {
                    if (e.getMessage().contains("existe d√©j√†")) {
                        log.info("‚ÑπÔ∏è  Utilisateur admin existe d√©j√†");
                    } else {
                        log.error("‚ùå Erreur lors de la cr√©ation de l'admin: {}", e.getMessage());
                    }
                }

                log.info("üë§ Cr√©ation d'un utilisateur de test...");
                try {
                    authService.createUser("user", "user123", false);
                    log.info("‚úÖ Utilisateur de test cr√©√© (pseudo: user, mot de passe: user123)");
                } catch (RuntimeException e) {
                    if (e.getMessage().contains("existe d√©j√†")) {
                        log.info("‚ÑπÔ∏è  Utilisateur de test existe d√©j√†");
                    } else {
                        log.error("‚ùå Erreur lors de la cr√©ation de l'utilisateur de test: {}", e.getMessage());
                    }
                }

                log.info("üéâ Initialisation des donn√©es termin√©e avec succ√®s !");

                displayUsefulInformation();

            } catch (Exception e) {
                log.error("‚ùå Erreur lors de l'initialisation des donn√©es", e);
            }
        };
    }

    /**
     * Affiche des informations utiles pour les d√©veloppeurs
     */
    private void displayUsefulInformation() {
        log.info("");
        log.info("üìö Informations utiles :");
        log.info("‚îÅ".repeat(50));
        log.info("üîó API Documentation : http://localhost:8080/swagger-ui.html");
        log.info("üóÑÔ∏è  Base de donn√©es H2 : http://localhost:8080/h2-console");
        log.info("   ‚îî‚îÄ JDBC URL: jdbc:h2:mem:ticketdb");
        log.info("   ‚îî‚îÄ Username: sa");
        log.info("   ‚îî‚îÄ Password: (vide)");
        log.info("");
        log.info("üë• Comptes de test disponibles :");
        log.info("   üîß Admin    : pseudo=admin, password=admin123");
        log.info("   üë§ User     : pseudo=user,  password=user123");
        log.info("");
        log.info("üåê Endpoints principaux :");
        log.info("   üîê Login          : POST /api/auth/login");
        log.info("   üìù Cr√©er compte   : POST /api/auth/register");
        log.info("   üé´ Tickets publics: GET  /api/tickets/unresolved");
        log.info("   üé´ Tous tickets  : GET  /api/tickets (auth requis)");
        log.info("   ‚ûï Cr√©er ticket  : POST /api/tickets (auth requis)");
        log.info("   ‚úÖ R√©soudre      : PUT  /api/tickets/{id}/resolve (admin)");
        log.info("‚îÅ".repeat(50));
        log.info("");
    }
}