# ===============================================
# Configuration de l'application Ticket Management - PRODUCTION
# ===============================================

# Configuration du serveur
server.port=${PORT:8080}
server.servlet.context-path=/

# Configuration de l'application
spring.application.name=ticket-management

# ===============================================
# Configuration de la base de données - PRODUCTION (MySQL)
# ===============================================

# Base de données MySQL (production)
spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/ticketdb?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Europe/Paris&useUnicode=true&characterEncoding=UTF-8}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=${DB_USERNAME:ticket_user}
spring.datasource.password=${DB_PASSWORD:ticket_password}

# Console H2 désactivée en production
spring.h2.console.enabled=false

# ===============================================
# Configuration JPA/Hibernate - PRODUCTION (MySQL)
# ===============================================

# Configuration JPA pour MySQL
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Configuration Hibernate pour la production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl

# Désactivation de l'affichage des requêtes SQL en production
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false

# Configuration des connexions optimisée
spring.jpa.properties.hibernate.connection.pool_size=20
spring.jpa.properties.hibernate.connection.autocommit=false

# Configuration spécifique MySQL
spring.jpa.properties.hibernate.dialect.storage_engine=innodb
spring.jpa.properties.hibernate.connection.characterEncoding=utf8mb4
spring.jpa.properties.hibernate.connection.useUnicode=true

# ===============================================
# Configuration JWT - PRODUCTION
# ===============================================

# Clé secrète JWT (OBLIGATOIRE : utiliser une variable d'environnement)
jwt.secret=${JWT_SECRET:CHANGEME_IN_PRODUCTION_WITH_STRONG_SECRET_KEY_AT_LEAST_256_BITS}
# Durée d'expiration en secondes (8 heures en production)
jwt.expiration=${JWT_EXPIRATION:28800}

# ===============================================
# Configuration de la validation
# ===============================================

spring.validation.enabled=true

# ===============================================
# Configuration du logging - PRODUCTION
# ===============================================

# Niveau de log réduit en production
logging.level.root=WARN
logging.level.com.example=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN

# Désactivation des logs SQL en production
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN
logging.level.org.springframework.jdbc.core=WARN

# Format des logs pour la production
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n

# Fichier de log avec rotation
logging.file.name=${LOG_PATH:/var/log/ticket-management}/ticket-management.log
logging.file.max-size=50MB
logging.file.max-history=10

# ===============================================
# Configuration Swagger/OpenAPI - PRODUCTION
# ===============================================

# Documentation API (peut être désactivée en production pour la sécurité)
springdoc.api-docs.enabled=${SWAGGER_ENABLED:true}
springdoc.swagger-ui.enabled=${SWAGGER_UI_ENABLED:true}
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha

# ===============================================
# Configuration Jackson (JSON)
# ===============================================

spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.default-property-inclusion=NON_NULL

# Format des dates
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=${TZ:Europe/Paris}

# ===============================================
# Configuration de la sécurité - PRODUCTION
# ===============================================

# Configuration CORS restrictive pour la production
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://your-frontend-domain.com}
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=Content-Type,Authorization,X-Requested-With
cors.allow-credentials=true

# ===============================================
# Configuration des sessions
# ===============================================

# Désactivation des sessions (API REST stateless)
server.servlet.session.persistent=false

# ===============================================
# Configuration de l'encodage
# ===============================================

server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# ===============================================
# Configuration des erreurs - PRODUCTION
# ===============================================

# Gestion sécurisée des erreurs en production
server.error.include-message=never
server.error.include-binding-errors=never
server.error.include-stacktrace=never
server.error.include-exception=false

# Page d'erreur personnalisée
server.error.whitelabel.enabled=false

# ===============================================
# Configuration de production
# ===============================================

# Hot reload désactivé en production
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# Cache activé en production
spring.web.resources.cache.period=31536000
spring.web.resources.chain.cache=true

# ===============================================
# Configuration des métriques et monitoring
# ===============================================

# Actuator endpoints sécurisés
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=never
management.info.env.enabled=false

# Sécurisation des endpoints de management
management.endpoints.web.base-path=/actuator
management.security.enabled=true

# Informations de l'application
info.app.name=Ticket Management API
info.app.description=API de gestion de tickets de support
info.app.version=1.0.0
info.app.environment=production

# ===============================================
# Configuration de la taille des requêtes
# ===============================================

spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB
server.tomcat.max-http-post-size=5MB

# ===============================================
# Configuration des pools de connexions - PRODUCTION (MySQL)
# ===============================================

# Configuration HikariCP optimisée pour la production avec MySQL
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE:20}
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN_IDLE:5}
spring.datasource.hikari.pool-name=TicketManagementProductionPool
spring.datasource.hikari.leak-detection-threshold=60000

# Configuration spécifique MySQL pour HikariCP
spring.datasource.hikari.connection-init-sql=SELECT 1
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=3000

# ===============================================
# Configuration des performances - PRODUCTION
# ===============================================

# Cache de second niveau Hibernate (désactivé temporairement)
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
# spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.jcache.JCacheRegionFactory

# Optimisations pour la production avec MySQL
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Configuration de compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=2048

# ===============================================
# Configuration SSL/TLS (si utilisé)
# ===============================================

# Décommentez et configurez pour HTTPS
# server.ssl.enabled=true
# server.ssl.key-store=${SSL_KEY_STORE:/path/to/keystore.p12}
# server.ssl.key-store-password=${SSL_KEY_STORE_PASSWORD}
# server.ssl.key-store-type=PKCS12
# server.ssl.key-alias=${SSL_KEY_ALIAS:ticket-management}

# ===============================================
# Variables d'environnement requises en production
# ===============================================

# DATABASE_URL - URL de la base de données MySQL
# DB_USERNAME - Nom d'utilisateur de la base de données
# DB_PASSWORD - Mot de passe de la base de données
# JWT_SECRET - Clé secrète JWT (minimum 256 bits)
# CORS_ALLOWED_ORIGINS - Domaines autorisés pour CORS
# LOG_PATH - Chemin des fichiers de log (optionnel)