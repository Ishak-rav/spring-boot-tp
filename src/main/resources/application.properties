# ===============================================
# Configuration de l'application Ticket Management
# ===============================================

# Configuration du serveur
server.port=8080
server.servlet.context-path=/

# Configuration de l'application
spring.application.name=ticket-management
spring.profiles.active=dev

# ===============================================
# Configuration de la base de données
# ===============================================

# Base de données H2 (développement)
spring.datasource.url=jdbc:h2:mem:ticketdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# Console H2 (développement uniquement)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=false

# Configuration PostgreSQL (production)
# Décommentez les lignes suivantes pour la production
# spring.datasource.url=jdbc:postgresql://localhost:5432/ticketdb
# spring.datasource.driver-class-name=org.postgresql.Driver
# spring.datasource.username=ticket_user
# spring.datasource.password=ticket_password

# ===============================================
# Configuration JPA/Hibernate
# ===============================================

# Configuration JPA
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Pour PostgreSQL, utilisez : org.hibernate.dialect.PostgreSQLDialect

# Configuration Hibernate
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl

# Initialisation des données SQL
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always

# Affichage des requêtes SQL
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# Configuration des connexions
spring.jpa.properties.hibernate.connection.pool_size=10
spring.jpa.properties.hibernate.connection.autocommit=false

# ===============================================
# Configuration JWT
# ===============================================

# Clé secrète JWT (à changer en production !)
jwt.secret=mySecretKey123456789012345678901234567890123456789012345678901234567890
# Durée d'expiration en secondes (24 heures)
jwt.expiration=86400

# ===============================================
# Configuration de la validation
# ===============================================

# Validation des beans
spring.validation.enabled=true

# ===============================================
# Configuration du logging
# ===============================================

# Niveau de log général
logging.level.root=INFO

# Logs spécifiques à l'application
logging.level.com.example=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=INFO

# Logs SQL et Hibernate
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.jdbc.core=DEBUG

# Format des logs
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# Fichier de log
logging.file.name=logs/ticket-management.log
logging.file.max-size=10MB
logging.file.max-history=5

# ===============================================
# Configuration Swagger/OpenAPI
# ===============================================

# Documentation API
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.try-it-out-enabled=true

# Informations sur l'API
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# ===============================================
# Configuration Jackson (JSON)
# ===============================================

# Sérialisation JSON
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.default-property-inclusion=NON_NULL

# Format des dates
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Europe/Paris

# ===============================================
# Configuration de la sécurité
# ===============================================

# Configuration CORS (en développement)
cors.allowed-origins=http://localhost:3000,http://localhost:4200,http://localhost:8080
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=*
cors.allow-credentials=true

# ===============================================
# Configuration des sessions
# ===============================================

# Désactivation des sessions (API REST stateless)
server.servlet.session.persistent=false

# ===============================================
# Configuration de l'encodage
# ===============================================

# Encodage des caractères
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true

# ===============================================
# Configuration des erreurs
# ===============================================

# Gestion des erreurs
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=on_param
server.error.include-exception=false

# ===============================================
# Configuration de développement
# ===============================================

# Hot reload (développement)
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# Cache désactivé en développement
spring.web.resources.cache.period=0
spring.web.resources.chain.cache=false

# ===============================================
# Configuration des métriques et monitoring
# ===============================================

# Actuator endpoints
management.endpoints.web.exposure.include=health,info,metrics,env
management.endpoint.health.show-details=when-authorized
management.info.env.enabled=true

# Informations de l'application
info.app.name=Ticket Management API
info.app.description=API de gestion de tickets de support
info.app.version=1.0.0
info.app.encoding=UTF-8
info.app.java.version=${java.version}

# ===============================================
# Configuration de la taille des requêtes
# ===============================================

# Taille maximale des requêtes
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
server.tomcat.max-http-post-size=10MB

# ===============================================
# Configuration des pools de connexions
# ===============================================

# Configuration HikariCP
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.pool-name=TicketManagementPool

# ===============================================
# Configuration des performances
# ===============================================

# Cache de second niveau Hibernate (optionnel)
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# Optimisations
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true